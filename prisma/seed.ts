// prisma/seed.ts
import { PrismaClient, DepartmentRole } from '../src/generated/prisma'

const prisma = new PrismaClient()

function slugify(str: string) {
  return str
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '.')
    .replace(/(^\.|\.$)/g, '')
}

async function main() {
  console.log('üóë Limpando tabelas...')

  await prisma.$transaction([
    prisma.process.deleteMany(),
    prisma.departmentMembership.deleteMany(),
    prisma.userEmail.deleteMany(),
    prisma.user.deleteMany(),
    prisma.department.deleteMany(),
    prisma.organization.deleteMany(),
  ])

  console.log('üèó Criando organiza√ß√£o...')
  const agerba = await prisma.organization.create({
    data: {
      name: 'AGERBA',
      slug: 'agerba',
      domain: 'agerba.ba.gov.br',
      processLabel: 'Processo',
    },
  })

  console.log('üèó Criando departamentos principais...')
  const de = await prisma.department.create({
    data: {
      name: 'Diretoria Executiva',
      code: 'DE',
      organizationId: agerba.id,
    },
  })

  await prisma.department.create({
    data: {
      name: 'Diretoria de Planejamento e Estat√≠sticas',
      code: 'DPE',
      organizationId: agerba.id,
    },
  })

  await prisma.department.create({
    data: {
      name: 'Diretoria de Qualidade e Servi√ßos',
      code: 'DQS',
      organizationId: agerba.id,
    },
  })

  console.log('üèó Criando departamentos subordinados √† DE...')
  const gab = await prisma.department.create({
    data: {
      name: 'Chefia de Gabinete',
      code: 'GAB',
      organizationId: agerba.id,
      parentId: de.id,
    },
  })

  const ngtic = await prisma.department.create({
    data: {
      name: 'N√∫cleo de Gest√£o de Tecnologia da Informa√ß√£o',
      code: 'NGTIC',
      organizationId: agerba.id,
      parentId: de.id,
    },
  })

  // Mapa c√≥digo -> id
  const departments = await prisma.department.findMany({
    where: { organizationId: agerba.id },
    select: { id: true, code: true },
  })
  const deptByCode = new Map(departments.map((d) => [d.code, d.id]))

  console.log('üë• Gerando usu√°rios...')
  // Lista base de nomes (pode ampliar/alterar quando quiser)
  const baseNames = [
    'Fulano da Silva',
    'Maria Gerente',
    'Jo√£o Santos',
    'Ana Pereira',
    'Carlos Almeida',
    'Beatriz Souza',
    'Pedro Lima',
    'Fernanda Rocha',
    'Rafael Nunes',
    'Juliana Costa',
    'Lucas Ribeiro',
    'Patr√≠cia Carvalho',
    'Thiago Teixeira',
    'Camila Fernandes',
    'Andr√© Moreira',
    'Larissa Ara√∫jo',
    'Bruno Martins',
    'Aline Freitas',
    'Diego Correia',
    'Nat√°lia Gomes',
    'Gabriel Barros',
    'Priscila Duarte',
    'Rodrigo Pires',
    'Let√≠cia Farias',
    'Vin√≠cius Macedo',
    'Bianca Castro',
    'Felipe Antunes',
    'Renata Moraes',
    'Gustavo Prado',
    'Sabrina Tavares',
  ]

  // Regras de distribui√ß√£o:
  // - Alternar departamentos principais para os usu√°rios
  // - Alguns usu√°rios receber√£o um segundo setor (sempre MEMBER no extra)
  // - Cada usu√°rio no m√°ximo 1 MANAGER (no setor "prim√°rio" dele)
  const deptCodes = ['DE', 'DPE', 'DQS', 'GAB', 'NGTIC'] as const

  type Plan = {
    name: string
    cpf: string
    primaryDept: string
    isManagerPrimary: boolean
    extraDepts: string[] // sempre MEMBER
  }

  const plans: Plan[] = baseNames.map((name, idx) => {
    // CPF fict√≠cio √∫nico por √≠ndice
    const cpf = String(10_000_000_000 + idx)
      .padEnd(11, '0')
      .slice(0, 11)

    // Distribui o depto prim√°rio por rodada
    const primaryDept = deptCodes[idx % deptCodes.length]

    // Regras de quem √© MANAGER no prim√°rio:
    // - Fulano da Silva (idx 0): MEMBER em NGTIC, mas tamb√©m MANAGER em GAB (dupla regra abaixo)
    // - Maria Gerente (idx 1): MANAGER na DE
    // - Demais: a cada 5¬∫ usu√°rio, ser√° MANAGER no prim√°rio; outros MEMBER
    let isManagerPrimary = idx % 5 === 1 // usu√°rios 1,6,11,... como MANAGER no prim√°rio

    // Alguns ter√£o depto extra (sempre MEMBER no extra)
    // Ex.: a cada 3¬∫ usu√°rio adiciona um extra
    const extraDepts: string[] = []
    if (idx % 3 === 0) {
      // Escolhe um extra diferente do prim√°rio
      const extrasPool = deptCodes.filter((c) => c !== primaryDept)
      extraDepts.push(extrasPool[(idx / 3) % extrasPool.length])
    }

    // Ajustes espec√≠ficos pedidos:
    if (name === 'Fulano da Silva') {
      // quer: MEMBER no NGTIC + MANAGER no GAB
      // Definimos prim√°rio = NGTIC como MEMBER e adicionamos GAB como MANAGER via tratamento especial abaixo
      return {
        name,
        cpf,
        primaryDept: 'NGTIC',
        isManagerPrimary: false,
        extraDepts: ['GAB'],
      }
    }
    if (name === 'Maria Gerente') {
      // quer: MANAGER na DE
      return {
        name,
        cpf,
        primaryDept: 'DE',
        isManagerPrimary: true,
        extraDepts: [],
      }
    }

    return { name, cpf, primaryDept, isManagerPrimary, extraDepts }
  })

  for (const plan of plans) {
    const localPart = slugify(plan.name)
    const email = `${localPart}@${agerba.domain}`

    const primaryDeptId = deptByCode.get(plan.primaryDept)
    if (!primaryDeptId)
      throw new Error(
        `Departamento prim√°rio ${plan.primaryDept} n√£o encontrado`,
      )

    // Monta memberships: prim√°rio (MANAGER ou MEMBER) + extras (sempre MEMBER)
    const membershipsData: Array<{
      role: DepartmentRole
      departmentId: string
    }> = [
      {
        role: plan.isManagerPrimary
          ? DepartmentRole.MANAGER
          : DepartmentRole.MEMBER,
        departmentId: primaryDeptId,
      },
    ]

    for (const extra of plan.extraDepts) {
      const extraId = deptByCode.get(extra)
      if (!extraId)
        throw new Error(`Departamento extra ${extra} n√£o encontrado`)
      membershipsData.push({
        role: DepartmentRole.MEMBER,
        departmentId: extraId,
      })
    }

    // Tratamento especial para Fulano: garantir MEMBER no NGTIC e MANAGER no GAB
    if (plan.name === 'Fulano da Silva') {
      const gabId = deptByCode.get('GAB')
      const ngticId = deptByCode.get('NGTIC')
      if (!gabId || !ngticId) throw new Error('GAB/NGTIC n√£o encontrados')
      // Sobrescreve garantidamente:
      membershipsData.length = 0
      membershipsData.push(
        { role: DepartmentRole.MEMBER, departmentId: ngticId },
        { role: DepartmentRole.MANAGER, departmentId: gabId },
      )
    }

    const created = await prisma.user.create({
      data: {
        name: plan.name,
        cpf: plan.cpf,
        emails: {
          create: { email, isPrimary: true },
        },
        memberships: {
          create: membershipsData.map((m) => ({
            role: m.role,
            department: { connect: { id: m.departmentId } },
          })),
        },
      },
      include: {
        emails: true,
        memberships: { include: { department: true } },
      },
    })

    const summary = created.memberships
      .map((m) => `${m.department.code}:${m.role}`)
      .join(', ')

    console.log(`‚úÖ ${created.name} <${email}> ‚Üí ${summary}`)
  }

  console.log('üéâ Seed conclu√≠do!')
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
